Question : https://www.hackerearth.com/practice/algorithms/graphs/depth-first-search/practice-problems/approximate/tree-construction-7b3cb288/

B = []
P = []
N, M =map(int,input().split())
count = int(N * (N + 1) / 2)
#print(N,M)
[B.append(i) for i in range(N, 0, -1)]
[P.append(i) for i in range(0, N)]
#print(B,P)
#print(count)
for node in range(N, 0, -1):
    #print(node)
    while count > M and P[node - 1] != 1:
        #print(node - 1,"h")
        P_node = P[node - 1]
        B[P_node - 1] -= 1
        P[node - 1] = P[P_node - 1]
       # print(P,B)
        count -= 1
    if count == M:
        break
#print("COmplete")
if count == M:
    for node in range(1,len(P)):
        print(P[node], node+1)
else:
    print(-1)

